{"version":3,"sources":["components/ErrorBoundary.js","components/TopAppBar.js","components/App.js","components/LoadingPanel.js","components/ErrorPanel.js","components/Fetch.js","hooks/useFetch.js","components/RacesTable.js","components/Races.js","common/calculations.js","components/RaceRacersTable.js","components/RaceInfo.js","components/Race.js","components/RacerRunsTable.js","components/RacerInfo.js","components/EditRunForm.js","components/Racer.js","components/NotFound.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","console","this","children","React","Component","TopAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","disabled","size","edge","color","mr","Menu","Link","component","RouterLink","to","textAlign","typography","textDecoration","Button","App","Container","Paper","elevation","LoadingPanel","m","py","CircularProgress","ErrorPanel","message","p","Typography","variant","align","gutterBottom","Fetch","uri","stateVersion","renderSuccess","loadingFallback","renderError","method","body","useState","data","setData","setError","loading","setLoading","useEffect","canceled","Error","undefined","options","headers","JSON","stringify","fetch","then","response","contentType","get","ok","json","status","catch","finally","useFetch","colNames","RacesTable","navigate","useNavigate","races","TableContainer","Table","TableHead","TableRow","bgcolor","map","column","TableCell","TableBody","row","border","cursor","onClick","_id","title","spot","Date","date","toLocaleDateString","type","location","name","Races","process","msecToSecStr","msec","toFixed","getPenalty","cones","getTime","raw","getPartsBest","parts","partsBest","part","times","runs","run","push","Math","max","getRacerResult","reduce","c","length","RaceDetailsTable","racers","getRacerPlace","results","places","result","racer","r","sort","a","b","i","indexOf","minWidth","place","issa_id","start","RaceInfo","isoString","Accordion","AccordionSummary","expandIcon","Divider","AccordionDetails","geo","org","email","comment","RaceDetails","Race","params","useParams","raceId","RacerRunsTable","onEditRun","concat","j","runDetails","racerId","runId","direction","course","RacerInfo","validationSchema","yup","oneOf","required","positive","integer","min","EditRunForm","open","onSubmit","onCancel","handleSubmit","useCallback","values","sec","log","warn","formik","useFormik","enableReinitialize","initialValues","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","select","id","label","margin","value","onChange","handleChange","onBlur","handleBlur","touched","Boolean","errors","helperText","option","MenuItem","inputProps","step","DialogActions","isSubmitting","RacerDetails","onRefresh","openForm","setOpenForm","setRunDetails","handleEditRun","handleCancel","Racer","setStateVersion","handleRefresh","NotFound","useLocation","pathname","render","StrictMode","path","element","index","document","getElementById"],"mappings":"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","file":"static/js/main.dfd9186d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.error(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}","import { Link, AppBar, Box, Toolbar, Button, IconButton } from '@mui/material';\r\nimport { Menu as MenuIcon } from '@mui/icons-material';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport default function TopAppBar() {\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }}>\r\n      <AppBar position='static'>\r\n        <Toolbar>\r\n          <IconButton\r\n            disabled\r\n            size='large'\r\n            edge='start'\r\n            color='inherit'\r\n            sx={{ mr: 2 }}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Link component={RouterLink} to='/' sx={{ flexGrow: 1, textAlign: 'center', typography: 'h6', color: 'inherit', textDecoration: 'none' }} >\r\n            ISSA Races\r\n          </Link>\r\n          <Button color='inherit' disabled >Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box >\r\n  );\r\n}","import { Container, Paper } from '@mui/material';\r\nimport { Outlet } from 'react-router-dom';\r\nimport TopAppBar from './TopAppBar.js';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Container>\r\n      <Paper elevation={12}>\r\n        <TopAppBar />\r\n        <Outlet />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n}","import { Box, CircularProgress, Paper } from '@mui/material';\r\n\r\nexport default function LoadingPanel() {\r\n    return (\r\n        <Paper sx={{ m: 'auto', py: 4 }}>\r\n            <Box sx={{ textAlign: 'center' }}>\r\n                <CircularProgress />\r\n            </Box>\r\n        </Paper>\r\n    )\r\n}","import { Typography, Paper } from '@mui/material';\r\n\r\nexport default function ErrorPanel({ message }) {\r\n    return (\r\n        <Paper sx={{ m: 'auto', p: 4 }}>\r\n            <Typography variant='h6' align='center' color='error' gutterBottom >\r\n                Application Error\r\n            </Typography>\r\n            <Typography variant='body1' align='center' color='error' >\r\n                {message}\r\n            </Typography>\r\n        </Paper>\r\n    )\r\n}","import useFetch from '../hooks/useFetch.js';\r\nimport LoadingPanel from './LoadingPanel.js'\r\nimport ErrorPanel from './ErrorPanel.js'\r\n\r\nexport default function Fetch({\r\n    uri,\r\n    stateVersion,\r\n    renderSuccess,\r\n    loadingFallback = <LoadingPanel />,\r\n    renderError = (error) => {\r\n        let { message } = error;\r\n        message = message || 'Fetch error';\r\n        return <ErrorPanel message={message} />;\r\n    }\r\n}) {\r\n    const { loading, data, error } = useFetch(uri, stateVersion);\r\n\r\n    if (loading) return loadingFallback;\r\n    if (error) return renderError(error);\r\n    if (data) return renderSuccess({data});\r\n}","import { useEffect, useState } from 'react';\r\n\r\n// When 'loading' is true 'data' and 'error' can contain stale data.\r\nexport default function useFetch(uri, stateVersion, method = 'GET', body = null) {\r\n    const [data, setData] = useState();\r\n    const [error, setError] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let canceled = false;\r\n        if (!uri) {\r\n            setError(new Error('Empty URI'));\r\n            setData(undefined);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n        setLoading(true);\r\n\r\n        const options = { method };\r\n        if (body) {\r\n            options.headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n            options.body = JSON.stringify(body);\r\n        }\r\n\r\n        fetch(uri, options)\r\n            .then(response => {\r\n                const contentType = response.headers.get('Content-Type');\r\n                if (response.ok && contentType === 'application/json; charset=utf-8') {\r\n                    return response.json();\r\n                } else {\r\n                    console.error(`Unexpected response status '${response.status}' or content type '${contentType}'`);\r\n                    throw new Error(`${response.status} Fetch failed`);\r\n                };\r\n            })\r\n            .then(data => {\r\n                if (!canceled) {\r\n                    setData(data);\r\n                    setError(undefined);\r\n                };\r\n            })\r\n            .catch(error => {\r\n                if (!canceled) {\r\n                    setError(error);\r\n                    setData(undefined);\r\n                };\r\n            })\r\n            .finally(() => { if (!canceled) setLoading(false); });\r\n\r\n        return () => { canceled = true };\r\n    }, [uri, stateVersion, method, body]);\r\n    return {\r\n        loading,\r\n        data,\r\n        error\r\n    };\r\n}\r\n","import { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst colNames = ['title', 'spot', 'date', 'type', 'location'];\r\n\r\nexport default function RacesTable({ data }) {\r\n    const navigate = useNavigate();\r\n    if (!data?.races) {\r\n        return (\r\n            // TODO: render something to be able to add data\r\n            <Paper>No data</Paper>\r\n        );\r\n    }\r\n    const races = data.races;\r\n\r\n    return (\r\n        <Paper>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow sx={{ bgcolor: 'grey.300' }} >\r\n                            {colNames.map((column) => (\r\n                                <TableCell key={column} align='right'>{column}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {races.map((row) => (\r\n                            <TableRow\r\n                                key={row._id}\r\n                                sx={{\r\n                                    '&:last-child td, &:last-child th': { border: 0 },\r\n                                    '&:hover': { bgcolor: 'grey.200' },\r\n                                    cursor: 'pointer'\r\n                                }}\r\n                                onClick={() => navigate(`/races/${row._id}`)}\r\n                            >\r\n                                <TableCell align='right'>{row.title}</TableCell>\r\n                                <TableCell align='right'>{row.spot}</TableCell>\r\n                                <TableCell align='right'>{new Date(row.date).toLocaleDateString()}</TableCell>\r\n                                <TableCell align='right'>{row.type}</TableCell>\r\n                                <TableCell align='right'>{row.location?.name}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n}","import Fetch from './Fetch.js';\r\nimport RacesTable from './RacesTable.js'\r\n\r\nexport default function Races() {\r\n  const uri = `${process.env.REACT_APP_SERVER_URL}races`;\r\n\r\n  return (\r\n    <Fetch\r\n      uri={uri}\r\n      renderSuccess={(props) => <RacesTable {...props} />}\r\n    />\r\n  );\r\n}","/**\r\n * Routines for calculating racer results.\r\n * All times are numbers in msec without fractions.\r\n * @module common/calculations\r\n */\r\n\r\n/**\r\n * Convert number of msec to seconds string.\r\n * @param {number} msec - time msec.\r\n * @return {string} time in seconds.\r\n */\r\nexport const msecToSecStr = msec => (msec / 1000).toFixed(2);\r\n\r\n/**\r\n * Convert time in seconds string to number of msec.\r\n * @param {string} sec - time string sec.\r\n * @return {number} time as number msec.\r\n */\r\n export const secToMsecStr = sec => sec * 1000;\r\n\r\n/**\r\n * Convert number of cones to time penalty msec.\r\n * @param {number} cones - number of cones.\r\n * @return {number} time penalty msec.\r\n */\r\n export const getPenalty = cones => cones * 100;\r\n\r\n /**\r\n * Calculate time from raw time and cones.\r\n * @param {number} raw - raw time string msec.\r\n * @param {number} cones - number of cones.\r\n * @return {number} result time msec.\r\n */\r\n  export const getTime = (raw, cones) => raw + getPenalty(cones);\r\n\r\n/**\r\n * Calculate time difference between racers result and race's best time\r\n * @param {number} raw - raw time string msec.\r\n * @param {number} cones - number of cones.\r\n * @param {number} raceBest - best time of the race msec.\r\n * @return {number} difference msec.\r\n */\r\n export const getDiff = (raw, cones, raceBest) => getTime(raw, cones) - raceBest;\r\n\r\n/**\r\n * Calculate the best results for each part.\r\n * Best result is the best of runs.\r\n * @param {Object} parts - the 'parts' array of the race doc.\r\n * @return {number[]} best times for each part.\r\n */\r\nexport const getPartsBest = parts => {\r\n    let partsBest = [];\r\n    for (const part of parts) {\r\n        let times = [];\r\n        for (const run of part.runs) {\r\n            times.push(getTime(run.raw, run.cones));\r\n        }\r\n        partsBest.push(Math.max(...times));\r\n    }\r\n    return partsBest;\r\n}\r\n\r\n/**\r\n * Calculate the final result for a racer in a race.\r\n * Result is the average of best of parts times.\r\n * @param {number[]} partsBest - best times for each part.\r\n * @return {number} Racers final result.\r\n */\r\n export const getRacerResult = partsBest => {\r\n    const sum = partsBest.reduce((p, c) => p + c);\r\n    return sum / partsBest.length;\r\n}\r\n\r\n/**\r\n * ISO date to local date.\r\n * @param {string} isoString - date in ISO standard.\r\n * @return {string} Local date string.\r\n */\r\nexport const toLocalDate = isoString => new Date(isoString).toLocaleDateString();\r\n","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\r\nimport { msecToSecStr, getPartsBest, getRacerResult } from '../common/calculations.js'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function RaceDetailsTable({ data }) {\r\n    const navigate = useNavigate();\r\n    if (!data?.racers) {\r\n        return (\r\n            <Paper>No data</Paper>\r\n        );\r\n    }\r\n\r\n    const getRacerPlace = (() => {\r\n        let results = [];\r\n        let places = [1];\r\n        return result => {\r\n            if (results.length === 0) {\r\n                for (const racer of data.racers) {\r\n                    const r = getRacerResult(getPartsBest(racer.parts));\r\n                    results.push(r);\r\n                }\r\n                results.sort((a, b) => a - b);\r\n                // calculate places array for place lookup\r\n                for (let i = 1; i < results.length; i++) {\r\n                    if (results[i] > results[i - 1])\r\n                        places[i] = i + 1;\r\n                    else\r\n                        places[i] = places[i - 1];\r\n                }\r\n            }\r\n            return places[results.indexOf(result)];\r\n        }\r\n    })();\r\n\r\n    const colNames = ['start', 'name', 'result', 'place'];\r\n    // TODO: row sorting\r\n    return (\r\n        <Paper>\r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 480 }} size='small'>\r\n                    <TableHead>\r\n                        <TableRow sx={{ bgcolor: 'grey.300' }}>\r\n                            {colNames.map((column) => (\r\n                                <TableCell key={column} align='right'>{column}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.racers.map((row) => {\r\n                            const result = getRacerResult(getPartsBest(row.parts));\r\n                            const place = getRacerPlace(result);\r\n                            return (\r\n                                <TableRow\r\n                                    key={row.issa_id}\r\n                                    sx={{\r\n                                        '&:last-child td, &:last-child th': { border: 0 },\r\n                                        '&:hover': { bgcolor: 'grey.200' },\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => navigate(`racers/${row.issa_id}`)}\r\n                                >\r\n                                    <TableCell align='right'>{row.start}</TableCell>\r\n                                    <TableCell align='right'>{row.name}</TableCell>\r\n                                    <TableCell align='right'>{msecToSecStr(result)}</TableCell>\r\n                                    <TableCell align='right'>{place}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n}","import { Paper, Accordion, AccordionSummary, AccordionDetails, Typography, Divider } from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { toLocalDate } from '../common/calculations';\r\n\r\nexport default function RaceInfo({ data }) {\r\n    if (!data?.racers) {\r\n        return (\r\n            <Paper>No data</Paper>\r\n        );\r\n    }\r\n    return (\r\n        <Paper>\r\n            <Accordion sx={{ bgcolor: 'lightyellow' }}>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography >\r\n                        {data.title + ', ' + data.spot + ', ' + toLocalDate(data.date)}\r\n                    </Typography>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        Type: {data.type}<br />\r\n                        Location: {data.location.name}<br />\r\n                        Geo: {data.location.geo[0]}, {data.location.geo[1]}<br />\r\n                        Organizer: {data.org.name}, {data.org.email}<br />\r\n                        {data.org.comment}<br />\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </Paper>\r\n    );\r\n}","import { useParams } from 'react-router-dom';\r\nimport Fetch from './Fetch.js';\r\nimport RaceRacersTable from './RaceRacersTable.js'\r\nimport RaceInfo from './RaceInfo.js'\r\n\r\nconst RaceDetails = props =>\r\n  <>\r\n    <RaceInfo {...props} />\r\n    <RaceRacersTable {...props} />\r\n  </>\r\n\r\nexport default function Race() {\r\n  const params = useParams();\r\n  const uri = `${process.env.REACT_APP_SERVER_URL}races/${params.raceId}`;\r\n\r\n  return (\r\n    <Fetch\r\n      uri={uri}\r\n      renderSuccess={(props) => <RaceDetails {...props} />}\r\n      />\r\n  );\r\n}","import { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\r\nimport { msecToSecStr, getPenalty, getTime } from '../common/calculations.js'\r\n\r\nexport default function RacerRunsTable({ data, onEditRun }) {\r\n    const parts = data.parts;\r\n    // const raceBest = raceBest || '8500';     // TODO\r\n    // const colNames = ['course', 'direction', 'raw', 'cones', 'penalty', 'diff', 'time'];\r\n    const colNames = ['course', 'direction', 'raw', 'cones', 'penalty', 'time'];\r\n\r\n    // TODO: Keep race info on this page\r\n    // TODO: part summary rows\r\n    return (\r\n        <Paper>\r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 480 }} size='small'>\r\n                    <TableHead>\r\n                        <TableRow sx={{ bgcolor: 'grey.300' }}>\r\n                            {colNames.map((column) => (\r\n                                <TableCell key={column} align='right'>{column}</TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n\r\n                        {[].concat(parts.map((part, i) => (\r\n                            part.runs.map((run, j) => (\r\n                                <TableRow\r\n                                    key={run._id}\r\n                                    sx={{\r\n                                        '&:last-child td, &:last-child th': { border: 0 },\r\n                                        '&:hover': { bgcolor: 'grey.200' },\r\n                                        cursor: 'pointer'\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        const runDetails = {\r\n                                            racer: data.name,\r\n                                            racerId: data.issa_id,\r\n                                            runId: run._id,\r\n                                            direction: part.direction,\r\n                                            course: part.course,\r\n                                            raw: run.raw,\r\n                                            cones: run.cones\r\n                                        };\r\n                                        onEditRun(runDetails);\r\n                                    }}\r\n                                >\r\n                                    <TableCell align='right'>{part.course}</TableCell>\r\n                                    <TableCell align='right'>{part.direction}</TableCell>\r\n                                    <TableCell align='right'>{msecToSecStr(run.raw)}</TableCell>\r\n                                    <TableCell align='right'>{run.cones}</TableCell>\r\n                                    {/* TODO <TableCell align='right'>{toSecondsStr(getDiff(run.raw, run.cones, raceBest))}</TableCell> */}\r\n                                    <TableCell align='right'>{msecToSecStr(getPenalty(run.cones))}</TableCell>\r\n                                    <TableCell align='right'>{msecToSecStr(getTime(run.raw, run.cones))}</TableCell>\r\n                                </TableRow>\r\n                            ))\r\n                        )))}\r\n\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n}","import { Paper, Accordion, AccordionSummary, AccordionDetails, Typography, Divider } from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n// import { toSecondsStr, getRaw, getPenalty, getDiff, getTime, getPartsBest, getRacerResult } from '../common/calculations.js'\r\nimport { msecToSecStr, getPartsBest, getRacerResult } from '../common/calculations.js'\r\n\r\nexport default function RacerInfo({ data }) {\r\n    // const place = place || '10';             // TODO: will require data for all racers\r\n    const parts = data.parts;\r\n    const partsBest = getPartsBest(parts);\r\n    const result = getRacerResult(partsBest);\r\n\r\n    return (\r\n        <Paper>\r\n            <Accordion sx={{ bgcolor: 'lightgreen' }}>\r\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                    <Typography>\r\n                        {data.name}\r\n                    </Typography>\r\n                </AccordionSummary>\r\n                <Divider />\r\n                <AccordionDetails>\r\n                    <Typography>\r\n                        ISSA ID: {data.issa_id}<br />\r\n                        Start: {data.start}<br />\r\n                        {/* TODO place: {place}<br /> */}\r\n                        Result: {msecToSecStr(result)}<br />\r\n                    </Typography>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </Paper>\r\n    );\r\n}","import { useCallback } from 'react';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { CircularProgress, MenuItem, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Typography } from '@mui/material';\r\nimport { msecToSecStr, secToMsecStr } from '../common/calculations.js';\r\n\r\nconst course = ['straight', 'irregular'];\r\nconst direction = ['in', 'out'];\r\n\r\nconst validationSchema = yup.object({\r\n    course: yup\r\n        .string('Course type')\r\n        .oneOf(course)\r\n        .required('Course type is required'),\r\n    direction: yup\r\n        .string('Direction')\r\n        .oneOf(direction)\r\n        .required('Direction is required'),\r\n    raw: yup\r\n        .number('Raw time')\r\n        .required('Raw time is required')\r\n        .positive(),\r\n    cones: yup\r\n        .number('Cones displaced')\r\n        .required('Cones displaced is required')\r\n        .integer('Should be integer')\r\n        .min(0, 'Cannot be be negative')\r\n        .max(5, '< 5')\r\n});\r\n\r\nexport default function EditRunForm({ open, runDetails, onSubmit, onCancel, raceId }) {\r\n\r\n    // sets isSubmitting automatically after resolve\r\n    const handleSubmit = useCallback(\r\n        async (values) => {\r\n            // await new Promise(function (resolve) { setTimeout(() => {resolve('resolved')}, 3000); });\r\n            const uri = `${process.env.REACT_APP_SERVER_URL}races/${raceId}/racers/${runDetails.racerId}/runs/${runDetails.runId}`;\r\n            const options = {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json; charset=utf-8' },\r\n                body: JSON.stringify({\r\n                    // course: values.course,               // TODO\r\n                    // direction: values.direction,\r\n                    raw: secToMsecStr(values.raw),\r\n                    cones: values.cones,\r\n                })\r\n            };\r\n\r\n            await fetch(uri, options)\r\n                .then(response => {\r\n                    const contentType = response.headers.get('Content-Type');\r\n                    if (response.ok && contentType === 'application/json; charset=utf-8') {\r\n                        return response.json();\r\n                    } else {\r\n                        throw new Error(`Unexpected response status '${response.status}' or content type '${contentType}'`);\r\n                    };\r\n                })\r\n                .then(data => {\r\n                    console.log(data);\r\n                })\r\n                .catch(error => {\r\n                    console.warn('error: ', error);\r\n                })\r\n                .finally(() => {\r\n                    onSubmit();\r\n                });\r\n        },\r\n        [onSubmit, raceId, runDetails.racerId, runDetails.runId]\r\n    );\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            course: runDetails.course,\r\n            direction: runDetails.direction,\r\n            raw: msecToSecStr(runDetails.raw),\r\n            cones: runDetails.cones\r\n        },\r\n        validationSchema: validationSchema,\r\n        onSubmit: handleSubmit,\r\n    });\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onCancel}>\r\n            <DialogTitle>\r\n                Add run\r\n                <Typography color='warning.main'>\r\n                    (course/direction update tbd)\r\n                </Typography>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {runDetails.racer || 'Racer Name'}\r\n                </DialogContentText>\r\n                <TextField\r\n                    autoFocus\r\n                    fullWidth\r\n                    select\r\n                    id='course'\r\n                    name='course'\r\n                    label='Course'\r\n                    margin='dense'\r\n                    variant='filled'\r\n                    value={formik.values.course}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    error={formik.touched.course && Boolean(formik.errors.course)}\r\n                    helperText={formik.touched.course && formik.errors.course}\r\n                >\r\n                    {course.map((option) => (\r\n                        <MenuItem key={option} value={option}>\r\n                            {option}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n                <TextField\r\n                    fullWidth\r\n                    select\r\n                    id='direction'\r\n                    name='direction'\r\n                    label='Direction'\r\n                    margin='dense'\r\n                    variant='filled'\r\n                    value={formik.values.direction}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    error={formik.touched.direction && Boolean(formik.errors.direction)}\r\n                    helperText={formik.touched.direction && formik.errors.direction}\r\n                >\r\n                    {direction.map((option) => (\r\n                        <MenuItem key={option} value={option}>\r\n                            {option}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n                <TextField\r\n                    fullWidth\r\n                    id='raw'\r\n                    name='raw'\r\n                    label='Raw'\r\n                    margin='dense'\r\n                    variant='filled'\r\n                    type='number'\r\n                    inputProps={{ step: '0.01' }}\r\n                    value={formik.values.raw}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    error={formik.touched.raw && Boolean(formik.errors.raw)}\r\n                    helperText={formik.touched.raw && formik.errors.raw}\r\n                />\r\n                <TextField\r\n                    fullWidth\r\n                    id='cones'\r\n                    name='cones'\r\n                    label='Cones'\r\n                    margin='dense'\r\n                    variant='filled'\r\n                    type='number'\r\n                    value={formik.values.cones}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    error={formik.touched.cones && Boolean(formik.errors.cones)}\r\n                    helperText={formik.touched.cones && formik.errors.cones}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant='outlined' fullWidth disabled={formik.isSubmitting} onClick={formik.handleSubmit}>\r\n                    {formik.isSubmitting ? <CircularProgress size={30} /> : 'OK'}\r\n                </Button>\r\n                <Button variant='outlined' fullWidth onClick={onCancel}>Cancel</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import { useState, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Fetch from './Fetch.js';\r\nimport RacerRunsTable from './RacerRunsTable.js'\r\nimport RacerInfo from './RacerInfo.js'\r\nimport EditRunForm from './EditRunForm.js';\r\n\r\n// TODO: Keep race info on this page\r\nconst RacerDetails = ({ data, raceId, onRefresh }) => {\r\n  const [openForm, setOpenForm] = useState(false);\r\n  const [runDetails, setRunDetails] = useState({});\r\n\r\n  const handleEditRun = useCallback((runDetails) => {\r\n    setRunDetails(runDetails);\r\n    setOpenForm(true);\r\n  }, []);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    setOpenForm(false);\r\n    onRefresh();\r\n  }, [onRefresh]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    setOpenForm(false);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <RacerInfo data={data} />\r\n      <RacerRunsTable data={data} onEditRun={handleEditRun} />\r\n      <EditRunForm open={openForm} runDetails={runDetails} onSubmit={handleSubmit} onCancel={handleCancel} raceId={raceId} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function Racer() {\r\n  const params = useParams();\r\n  const uri = `${process.env.REACT_APP_SERVER_URL}races/${params.raceId}/racers/${params.racerId}`;\r\n  const [stateVersion, setStateVersion] = useState(0);\r\n\r\n  const handleRefresh = useCallback(() => {\r\n    setStateVersion((stateVersion) => stateVersion + 1);\r\n  }, []);\r\n\r\n  return (\r\n    <Fetch\r\n      uri={uri}\r\n      stateVersion={stateVersion}\r\n      renderSuccess={(props) => <RacerDetails {...props} raceId={params.raceId} onRefresh={handleRefresh} />}\r\n    />\r\n  );\r\n}","import { useLocation } from 'react-router-dom';\r\nimport { Typography, Paper } from '@mui/material';\r\n\r\nexport function NotFound() {\r\n    let location = useLocation();\r\n    console.log(location);\r\n    return (\r\n        <Paper sx={{ m: 'auto', p: 4 }}>\r\n            <Typography align='center' color='error' >\r\n                Resource not found at {location.pathname}\r\n            </Typography>\r\n        </Paper>\r\n    );\r\n}","import React from 'react';\r\nimport { render } from 'react-dom';\r\n// import { BrowserRouter as Router } from 'react-router-dom';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { Routes, Route } from 'react-router-dom';\r\n\r\nimport ErrorBoundary from './components/ErrorBoundary.js'\r\nimport App from './components/App';\r\nimport Races from './components/Races.js';\r\nimport Race from './components/Race.js';\r\nimport Racer from './components/Racer.js';\r\nimport { NotFound } from './components/NotFound.js';\r\n\r\nimport './index.css';\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <ErrorBoundary>\r\n      <Router>\r\n        <Routes>\r\n          <Route path='/' element={<App />} >\r\n            <Route index element={<Races />} />\r\n            <Route path='races/:raceId' element={<Race />} />\r\n            <Route path='races/:raceId/racers/:racerId' element={<Racer />} />\r\n            <Route path='*' element={<NotFound />} />\r\n          </Route >\r\n        </Routes>\r\n      </Router>\r\n    </ErrorBoundary>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}